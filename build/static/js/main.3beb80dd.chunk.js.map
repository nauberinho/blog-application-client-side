{"version":3,"sources":["components/Menu/index.tsx","generated/graphql.tsx","components/Users/UserList/UserList.tsx","components/Users/UserList/index.tsx","components/Users/User/User.tsx","components/Users/User/index.tsx","components/Users/CreateUser/index.tsx","components/Users/index.tsx","components/Posts/PostList/PostList.tsx","components/Posts/PostList/index.tsx","components/Posts/Post/Post.tsx","components/Posts/Post/index.tsx","components/Posts/index.tsx","App.tsx","index.tsx"],"names":["Container","styled","div","Logo","LinkWrapper","NavButton","Link","Menu","to","PostDocument","gql","PostListDocument","CreateUserDocument","CreateUserComponent","props","mutation","UserProfileDocument","UserListDocument","UserItem","UserList","data","_","get","map","user","node","uuid","key","username","UserListContainer","baseOptions","ApolloReactHooks","error","loading","Username","UserContainer","UserInfo","UserInfoTitle","PostTitle","User","posts","edges","post","title","id","match","params","variables","String","refetch","React","CreateUserContainer","mutate","client","onClick","Users","exact","path","component","CreateUser","PostList","allPosts","i","PostListContainer","Title","Info","Body","Post","console","log","body","PostContainer","Posts","theme","mediaQueries","mobileM","tablet","laptop","laptopL","desktopL","Content","App","ApolloClient","uri","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3beb80dd.chunk.js","sourcesContent":["import * as React from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nconst Container = styled.div`\n  display: flex;\n  padding-top: 2rem;\n`;\n\nconst Logo = styled.div`\n  padding: 1rem 3rem 1rem 0;\n  font-size: 1.5rem;\n  font-weight: 500;\n  flex: 1;\n`;\nconst LinkWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  border: 2px solid black;\n  float: right;\n  justify-content: flex-end;\n`;\n\nconst NavButton = styled(Link)`\n  padding: 1rem 3rem;\n  font-weight: 500;\n  font-size: 1.25rem;\n  text-decoration: none;\n  color: black;\n`;\n\nconst Menu: React.FC = () => {\n  return (\n    <Container>\n      <Logo>Blogify</Logo>\n      <LinkWrapper>\n        <NavButton to=\"/users\">Users</NavButton>\n        <NavButton to=\"/posts\">Posts</NavButton>\n        <NavButton to=\"/users\">Users</NavButton>\n      </LinkWrapper>\n    </Container>\n  );\n};\n\nexport default Menu;\n","import gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n};\n\nexport type CreatePost = {\n   __typename?: 'CreatePost',\n  post?: Maybe<PostObject>,\n};\n\nexport type CreateUser = {\n   __typename?: 'CreateUser',\n  user?: Maybe<UserObject>,\n};\n\nexport type Mutation = {\n   __typename?: 'Mutation',\n  createPost?: Maybe<CreatePost>,\n  createUser?: Maybe<CreateUser>,\n};\n\n\nexport type MutationCreatePostArgs = {\n  body: Scalars['String'],\n  title: Scalars['String'],\n  username: Scalars['String']\n};\n\n\nexport type MutationCreateUserArgs = {\n  username: Scalars['String']\n};\n\n/** An object with an ID */\nexport type Node = {\n  /** The ID of the object. */\n  id: Scalars['ID'],\n};\n\n/** The Relay compliant `PageInfo` type, containing data necessary to paginate this connection. */\nexport type PageInfo = {\n   __typename?: 'PageInfo',\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean'],\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean'],\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']>,\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']>,\n};\n\nexport type PostObject = Node & {\n   __typename?: 'PostObject',\n  uuid: Scalars['ID'],\n  title?: Maybe<Scalars['String']>,\n  body?: Maybe<Scalars['String']>,\n  authorId?: Maybe<Scalars['Int']>,\n  author?: Maybe<UserObject>,\n  /** The ID of the object. */\n  id: Scalars['ID'],\n};\n\nexport type PostObjectConnection = {\n   __typename?: 'PostObjectConnection',\n  /** Pagination data for this connection. */\n  pageInfo: PageInfo,\n  /** Contains the nodes in this connection. */\n  edges: Array<Maybe<PostObjectEdge>>,\n};\n\n/** A Relay edge containing a `PostObject` and its cursor. */\nexport type PostObjectEdge = {\n   __typename?: 'PostObjectEdge',\n  /** The item at the end of the edge */\n  node?: Maybe<PostObject>,\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'],\n};\n\nexport type Query = {\n   __typename?: 'Query',\n  /** The ID of the object */\n  node?: Maybe<Node>,\n  allPosts?: Maybe<PostObjectConnection>,\n  post?: Maybe<PostObject>,\n  allUsers?: Maybe<UserObjectConnection>,\n  user?: Maybe<UserObject>,\n};\n\n\nexport type QueryNodeArgs = {\n  id: Scalars['ID']\n};\n\n\nexport type QueryAllPostsArgs = {\n  before?: Maybe<Scalars['String']>,\n  after?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryPostArgs = {\n  uuid?: Maybe<Scalars['String']>\n};\n\n\nexport type QueryAllUsersArgs = {\n  before?: Maybe<Scalars['String']>,\n  after?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryUserArgs = {\n  uuid?: Maybe<Scalars['String']>\n};\n\nexport type UserObject = Node & {\n   __typename?: 'UserObject',\n  uuid: Scalars['ID'],\n  username?: Maybe<Scalars['String']>,\n  posts?: Maybe<PostObjectConnection>,\n  /** The ID of the object. */\n  id: Scalars['ID'],\n};\n\n\nexport type UserObjectPostsArgs = {\n  before?: Maybe<Scalars['String']>,\n  after?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\nexport type UserObjectConnection = {\n   __typename?: 'UserObjectConnection',\n  /** Pagination data for this connection. */\n  pageInfo: PageInfo,\n  /** Contains the nodes in this connection. */\n  edges: Array<Maybe<UserObjectEdge>>,\n};\n\n/** A Relay edge containing a `UserObject` and its cursor. */\nexport type UserObjectEdge = {\n   __typename?: 'UserObjectEdge',\n  /** The item at the end of the edge */\n  node?: Maybe<UserObject>,\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'],\n};\n\nexport type PostQueryVariables = {\n  uuid: Scalars['String']\n};\n\n\nexport type PostQuery = (\n  { __typename?: 'Query' }\n  & { post: Maybe<(\n    { __typename?: 'PostObject' }\n    & Pick<PostObject, 'body' | 'id' | 'title'>\n    & { author: Maybe<(\n      { __typename?: 'UserObject' }\n      & Pick<UserObject, 'username' | 'id'>\n    )> }\n  )> }\n);\n\nexport type PostListQueryVariables = {};\n\n\nexport type PostListQuery = (\n  { __typename?: 'Query' }\n  & { allPosts: Maybe<(\n    { __typename?: 'PostObjectConnection' }\n    & { edges: Array<Maybe<(\n      { __typename?: 'PostObjectEdge' }\n      & { node: Maybe<(\n        { __typename?: 'PostObject' }\n        & Pick<PostObject, 'body' | 'uuid' | 'title'>\n        & { author: Maybe<(\n          { __typename?: 'UserObject' }\n          & Pick<UserObject, 'id' | 'username'>\n        )> }\n      )> }\n    )>> }\n  )> }\n);\n\nexport type CreateUserMutationVariables = {\n  username: Scalars['String']\n};\n\n\nexport type CreateUserMutation = (\n  { __typename?: 'Mutation' }\n  & { createUser: Maybe<(\n    { __typename?: 'CreateUser' }\n    & { user: Maybe<(\n      { __typename?: 'UserObject' }\n      & Pick<UserObject, 'id' | 'username'>\n      & { posts: Maybe<(\n        { __typename?: 'PostObjectConnection' }\n        & { edges: Array<Maybe<(\n          { __typename?: 'PostObjectEdge' }\n          & { node: Maybe<(\n            { __typename?: 'PostObject' }\n            & Pick<PostObject, 'id' | 'authorId' | 'body' | 'title'>\n            & { author: Maybe<(\n              { __typename?: 'UserObject' }\n              & Pick<UserObject, 'username' | 'uuid'>\n            )> }\n          )> }\n        )>> }\n      )> }\n    )> }\n  )> }\n);\n\nexport type UserProfileQueryVariables = {\n  uuid: Scalars['String']\n};\n\n\nexport type UserProfileQuery = (\n  { __typename?: 'Query' }\n  & { user: Maybe<(\n    { __typename?: 'UserObject' }\n    & Pick<UserObject, 'username' | 'uuid'>\n    & { posts: Maybe<(\n      { __typename?: 'PostObjectConnection' }\n      & { edges: Array<Maybe<(\n        { __typename?: 'PostObjectEdge' }\n        & { node: Maybe<(\n          { __typename?: 'PostObject' }\n          & Pick<PostObject, 'uuid' | 'body' | 'title'>\n          & { author: Maybe<(\n            { __typename?: 'UserObject' }\n            & Pick<UserObject, 'id' | 'username'>\n          )> }\n        )> }\n      )>> }\n    )> }\n  )> }\n);\n\nexport type UserListQueryVariables = {};\n\n\nexport type UserListQuery = (\n  { __typename?: 'Query' }\n  & { allUsers: Maybe<(\n    { __typename?: 'UserObjectConnection' }\n    & { edges: Array<Maybe<(\n      { __typename?: 'UserObjectEdge' }\n      & { node: Maybe<(\n        { __typename?: 'UserObject' }\n        & Pick<UserObject, 'username' | 'uuid'>\n        & { posts: Maybe<(\n          { __typename?: 'PostObjectConnection' }\n          & { edges: Array<Maybe<(\n            { __typename?: 'PostObjectEdge' }\n            & { node: Maybe<(\n              { __typename?: 'PostObject' }\n              & Pick<PostObject, 'uuid' | 'body' | 'title'>\n              & { author: Maybe<(\n                { __typename?: 'UserObject' }\n                & Pick<UserObject, 'uuid' | 'username'>\n              )> }\n            )> }\n          )>> }\n        )> }\n      )> }\n    )>> }\n  )> }\n);\n\n\nexport const PostDocument = gql`\n    query Post($uuid: String!) {\n  post(uuid: $uuid) {\n    body\n    id\n    title\n    author {\n      username\n      id\n    }\n  }\n}\n    `;\nexport type PostComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<PostQuery, PostQueryVariables>, 'query'> & ({ variables: PostQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const PostComponent = (props: PostComponentProps) => (\n      <ApolloReactComponents.Query<PostQuery, PostQueryVariables> query={PostDocument} {...props} />\n    );\n    \nexport type PostProps<TChildProps = {}> = ApolloReactHoc.DataProps<PostQuery, PostQueryVariables> & TChildProps;\nexport function withPost<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  PostQuery,\n  PostQueryVariables,\n  PostProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, PostQuery, PostQueryVariables, PostProps<TChildProps>>(PostDocument, {\n      alias: 'post',\n      ...operationOptions\n    });\n};\n\n    export function usePostQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<PostQuery, PostQueryVariables>) {\n      return ApolloReactHooks.useQuery<PostQuery, PostQueryVariables>(PostDocument, baseOptions);\n    }\n      export function usePostLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<PostQuery, PostQueryVariables>) {\n        return ApolloReactHooks.useLazyQuery<PostQuery, PostQueryVariables>(PostDocument, baseOptions);\n      }\n      \nexport type PostQueryHookResult = ReturnType<typeof usePostQuery>;\nexport type PostQueryResult = ApolloReactCommon.QueryResult<PostQuery, PostQueryVariables>;\nexport const PostListDocument = gql`\n    query PostList {\n  allPosts {\n    edges {\n      node {\n        body\n        uuid\n        title\n        author {\n          id\n          username\n        }\n      }\n    }\n  }\n}\n    `;\nexport type PostListComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<PostListQuery, PostListQueryVariables>, 'query'>;\n\n    export const PostListComponent = (props: PostListComponentProps) => (\n      <ApolloReactComponents.Query<PostListQuery, PostListQueryVariables> query={PostListDocument} {...props} />\n    );\n    \nexport type PostListProps<TChildProps = {}> = ApolloReactHoc.DataProps<PostListQuery, PostListQueryVariables> & TChildProps;\nexport function withPostList<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  PostListQuery,\n  PostListQueryVariables,\n  PostListProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, PostListQuery, PostListQueryVariables, PostListProps<TChildProps>>(PostListDocument, {\n      alias: 'postList',\n      ...operationOptions\n    });\n};\n\n    export function usePostListQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<PostListQuery, PostListQueryVariables>) {\n      return ApolloReactHooks.useQuery<PostListQuery, PostListQueryVariables>(PostListDocument, baseOptions);\n    }\n      export function usePostListLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<PostListQuery, PostListQueryVariables>) {\n        return ApolloReactHooks.useLazyQuery<PostListQuery, PostListQueryVariables>(PostListDocument, baseOptions);\n      }\n      \nexport type PostListQueryHookResult = ReturnType<typeof usePostListQuery>;\nexport type PostListQueryResult = ApolloReactCommon.QueryResult<PostListQuery, PostListQueryVariables>;\nexport const CreateUserDocument = gql`\n    mutation createUser($username: String!) {\n  createUser(username: $username) {\n    user {\n      id\n      username\n      posts {\n        edges {\n          node {\n            id\n            author {\n              username\n              uuid\n            }\n            authorId\n            body\n            title\n          }\n        }\n      }\n    }\n  }\n}\n    `;\nexport type CreateUserMutationFn = ApolloReactCommon.MutationFunction<CreateUserMutation, CreateUserMutationVariables>;\nexport type CreateUserComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<CreateUserMutation, CreateUserMutationVariables>, 'mutation'>;\n\n    export const CreateUserComponent = (props: CreateUserComponentProps) => (\n      <ApolloReactComponents.Mutation<CreateUserMutation, CreateUserMutationVariables> mutation={CreateUserDocument} {...props} />\n    );\n    \nexport type CreateUserProps<TChildProps = {}> = ApolloReactHoc.MutateProps<CreateUserMutation, CreateUserMutationVariables> & TChildProps;\nexport function withCreateUser<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  CreateUserMutation,\n  CreateUserMutationVariables,\n  CreateUserProps<TChildProps>>) {\n    return ApolloReactHoc.withMutation<TProps, CreateUserMutation, CreateUserMutationVariables, CreateUserProps<TChildProps>>(CreateUserDocument, {\n      alias: 'createUser',\n      ...operationOptions\n    });\n};\n\n    export function useCreateUserMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateUserMutation, CreateUserMutationVariables>) {\n      return ApolloReactHooks.useMutation<CreateUserMutation, CreateUserMutationVariables>(CreateUserDocument, baseOptions);\n    }\nexport type CreateUserMutationHookResult = ReturnType<typeof useCreateUserMutation>;\nexport type CreateUserMutationResult = ApolloReactCommon.MutationResult<CreateUserMutation>;\nexport type CreateUserMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateUserMutation, CreateUserMutationVariables>;\nexport const UserProfileDocument = gql`\n    query UserProfile($uuid: String!) {\n  user(uuid: $uuid) {\n    username\n    uuid\n    posts {\n      edges {\n        node {\n          uuid\n          body\n          title\n          author {\n            id\n            username\n          }\n        }\n      }\n    }\n  }\n}\n    `;\nexport type UserProfileComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<UserProfileQuery, UserProfileQueryVariables>, 'query'> & ({ variables: UserProfileQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const UserProfileComponent = (props: UserProfileComponentProps) => (\n      <ApolloReactComponents.Query<UserProfileQuery, UserProfileQueryVariables> query={UserProfileDocument} {...props} />\n    );\n    \nexport type UserProfileProps<TChildProps = {}> = ApolloReactHoc.DataProps<UserProfileQuery, UserProfileQueryVariables> & TChildProps;\nexport function withUserProfile<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  UserProfileQuery,\n  UserProfileQueryVariables,\n  UserProfileProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, UserProfileQuery, UserProfileQueryVariables, UserProfileProps<TChildProps>>(UserProfileDocument, {\n      alias: 'userProfile',\n      ...operationOptions\n    });\n};\n\n    export function useUserProfileQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<UserProfileQuery, UserProfileQueryVariables>) {\n      return ApolloReactHooks.useQuery<UserProfileQuery, UserProfileQueryVariables>(UserProfileDocument, baseOptions);\n    }\n      export function useUserProfileLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<UserProfileQuery, UserProfileQueryVariables>) {\n        return ApolloReactHooks.useLazyQuery<UserProfileQuery, UserProfileQueryVariables>(UserProfileDocument, baseOptions);\n      }\n      \nexport type UserProfileQueryHookResult = ReturnType<typeof useUserProfileQuery>;\nexport type UserProfileQueryResult = ApolloReactCommon.QueryResult<UserProfileQuery, UserProfileQueryVariables>;\nexport const UserListDocument = gql`\n    query UserList {\n  allUsers {\n    edges {\n      node {\n        username\n        uuid\n        posts {\n          edges {\n            node {\n              uuid\n              body\n              title\n              author {\n                uuid\n                username\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\nexport type UserListComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<UserListQuery, UserListQueryVariables>, 'query'>;\n\n    export const UserListComponent = (props: UserListComponentProps) => (\n      <ApolloReactComponents.Query<UserListQuery, UserListQueryVariables> query={UserListDocument} {...props} />\n    );\n    \nexport type UserListProps<TChildProps = {}> = ApolloReactHoc.DataProps<UserListQuery, UserListQueryVariables> & TChildProps;\nexport function withUserList<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  UserListQuery,\n  UserListQueryVariables,\n  UserListProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, UserListQuery, UserListQueryVariables, UserListProps<TChildProps>>(UserListDocument, {\n      alias: 'userList',\n      ...operationOptions\n    });\n};\n\n    export function useUserListQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<UserListQuery, UserListQueryVariables>) {\n      return ApolloReactHooks.useQuery<UserListQuery, UserListQueryVariables>(UserListDocument, baseOptions);\n    }\n      export function useUserListLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<UserListQuery, UserListQueryVariables>) {\n        return ApolloReactHooks.useLazyQuery<UserListQuery, UserListQueryVariables>(UserListDocument, baseOptions);\n      }\n      \nexport type UserListQueryHookResult = ReturnType<typeof useUserListQuery>;\nexport type UserListQueryResult = ApolloReactCommon.QueryResult<UserListQuery, UserListQueryVariables>;","import * as React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { UserListQuery } from \"../../../generated/graphql\";\nimport _ from \"lodash\";\n\ninterface User {\n  node: {\n    uuid: string;\n    username: string;\n  };\n}\n\ninterface Props {\n  data: UserListQuery;\n}\n\nconst Container = styled.div``;\n\nconst UserItem = styled(Link)`\n  padding: 2rem 5rem 2rem 0rem;\n  border-bottom: 2px solid lightgray;\n  cursor: pointer;\n  display: block;\n  color: black;\n  text-decoration: none;\n  font-size: 1.5rem;\n  font-weight: 700;\n`;\n\nexport const UserList: React.FC<Props> = ({ data }) => {\n  return (\n    <Container>\n      {!!_.get(data, \"allUsers.edges\", false) &&\n        _.get(data, \"allUsers.edges\", []).map((user: User) => (\n          <UserItem to={`/users/${user.node.uuid}`} key={user.node.uuid}>\n            {user.node.username!}\n          </UserItem>\n        ))}\n    </Container>\n  );\n};\n","import * as React from \"react\";\nimport { useUserListQuery } from \"../../../generated/graphql\";\nimport { UserList } from \"./UserList\";\n\nconst UserListContainer: React.FC = () => {\n  const { data, error, loading } = useUserListQuery();\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (error || !data) {\n    return <div>ERROR</div>;\n  }\n\n  return (\n    <>\n      <UserList data={data} />\n    </>\n  );\n};\n\nexport default UserListContainer;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { UserProfileQuery } from \"../../../generated/graphql\";\nimport styled from \"styled-components\";\n\nconst Username = styled.div`\n  padding: 1rem 0 0 0;\n  border-radius: 5px;\n  font-weight: 700;\n`;\n\nconst UserContainer = styled.div`\n  padding: 2rem;\n`;\n\nconst UserInfo = styled.div`\n  padding-top: 2rem;\n  border: 1px solid lightgray;\n`;\n\nconst UserInfoTitle = styled.div`\n  font-weight: 600;\n  color: gray;\n`;\n\nconst PostTitle = styled(Link)`\n  padding-top: 1rem;\n  cursor: pointer;\n`;\n\ninterface Props {\n  data: UserProfileQuery;\n}\n\nexport const User: React.FC<Props> = ({ data }) => {\n  const { user } = data;\n  if (!user) {\n    return <div>No User is available</div>;\n  }\n\n  return (\n    <UserContainer>\n      <Username>{user.username}</Username>\n\n      <UserInfo>\n        <UserInfoTitle>Posts</UserInfoTitle>\n        {user.posts!.edges.map((post: any) => (\n          <PostTitle to={`/posts/${post.node.uuid}`}>\n            {post.node.title}\n          </PostTitle>\n        ))}\n      </UserInfo>\n    </UserContainer>\n  );\n};\n","import * as React from \"react\";\nimport { useUserProfileQuery } from \"../../../generated/graphql\";\nimport { User } from \"./User\";\n\ninterface Props {\n  match: {\n    params: { id: string };\n  };\n}\n\nconst UserContainer: React.FC<Props> = ({ match }) => {\n  const { id } = match.params;\n  const { data, error, loading, refetch } = useUserProfileQuery({\n    variables: { uuid: String(id) }\n  });\n  React.useEffect(() => {\n    refetch();\n  }, [id]);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (error) {\n    return <div>ERROR</div>;\n  }\n\n  if (!data) {\n    return <div>Select a flight from the panel</div>;\n  }\n\n  return <User data={data} />;\n};\n\nexport default UserContainer;\n","import * as React from \"react\";\n// import styled from \"styled-components\";\n// import { Mutation } from \"react-apollo\";\n// import { useMutation } from \"@apollo/react-hooks\";\nimport { CreateUserComponent } from \"../../../generated/graphql\";\n\nconst CreateUserContainer: React.FC = () => {\n  //   const [createUser, { error, loading, data }] = useMutation(\n  //     CreateUserMutation\n  //   );\n\n  return (\n    <CreateUserComponent>\n      {(mutate, { client }) => (\n        <div\n          onClick={() => {\n            mutate({ variables: { username: \"nickenauber\" } });\n          }}\n        >\n          Create User\n        </div>\n      )}\n    </CreateUserComponent>\n  );\n};\n\nexport default CreateUserContainer;\n","import * as React from \"react\";\nimport UserList from \"./UserList\";\nimport User from \"./User\";\nimport CreateUser from \"./CreateUser\";\nimport { Route } from \"react-router-dom\";\n\nconst Users: React.FC = () => {\n  return (\n    <>\n      <Route exact path=\"/users\" component={UserList} />\n      <Route exact path=\"/users/:id\" component={User} />\n      <Route exact path=\"/users/create\" component={CreateUser} />\n    </>\n  );\n};\n\nexport default Users;\n","import * as React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { PostListQuery } from \"../../../generated/graphql\";\nimport _ from \"lodash\";\n\ninterface Props {\n  data: PostListQuery;\n}\n\nconst Container = styled.div`\n  border: 1px solid  #37C870 ;\n`;\n\nexport const PostList: React.FC<Props> = ({ data }) => (\n  <Container>\n    {data.allPosts &&\n      data.allPosts.edges.map((post, i) => (\n        <Link key={i} to={`/posts/${post!.node!.uuid}`}>\n          {_.get(post, \"node.title\", \"\")}\n        </Link>\n      ))}\n  </Container>\n);\n","import * as React from \"react\";\nimport { usePostListQuery } from \"../../../generated/graphql\";\nimport { PostList } from \"./PostList\";\n\nconst PostListContainer: React.FC = () => {\n  const { data, error, loading } = usePostListQuery();\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (error || !data) {\n    return <div>ERROR</div>;\n  }\n\n  return <PostList data={data} />;\n};\n\nexport default PostListContainer;\n","import React from \"react\";\nimport { PostQuery } from \"../../../generated/graphql\";\nimport styled from \"styled-components\";\nimport _ from \"lodash\";\n\nconst Container = styled.div`\n  padding: 2rem;\n`;\n\nconst Title = styled.div`\n  padding: 1rem 0 0 0;\n  border-radius: 5px;\n  font-weight: 700;\n`;\n\nconst Info = styled.div`\n  padding-top: 2rem;\n  border: 1px solid lightgray;\n`;\n\nconst Body = styled.div`\n  padding: 2rem;\n  border: 2px solid dark #37C870 ;\n`;\n\ninterface Props {\n  data: PostQuery;\n}\n\nconst Post: React.FC<Props> = ({ data }) => {\n  const { post } = data;\n  console.log(data);\n  if (!post) {\n    return <div>No post is available</div>;\n  }\n\n  return (\n    <Container>\n      <Title>{post.title}</Title>\n      <Info></Info>\n      <Body>{post.body}</Body>\n    </Container>\n  );\n};\n\nexport default Post;\n","import * as React from \"react\";\nimport { usePostQuery } from \"../../../generated/graphql\";\nimport Post from \"./Post\";\n\ninterface OwnProps {\n  match: { params: { id: string } };\n}\n\nconst PostContainer: React.FC<OwnProps> = ({ match }) => {\n  const { id } = match.params;\n  const { data, error, loading, refetch } = usePostQuery({\n    variables: { uuid: String(id) }\n  });\n  React.useEffect(() => {\n    refetch();\n  }, [id]);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (error) {\n    return <div>ERROR</div>;\n  }\n\n  if (!data) {\n    return <div>Select a flight from the panel</div>;\n  }\n\n  return <Post data={data} />;\n};\n\nexport default PostContainer;\n","import * as React from \"react\";\nimport PostList from \"./PostList\";\nimport Post from \"./Post\";\nimport { Route } from \"react-router-dom\";\n\nconst Posts: React.FC = () => {\n  return (\n    <>\n      <Route exact path=\"/posts\" component={PostList} />\n      <Route exact path=\"/posts/:id\" component={Post} />\n    </>\n  );\n};\n\nexport default Posts;\n","import React, { useState } from \"react\";\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\";\nimport { theme } from \"react-elems\";\nimport styled from \"styled-components\";\n\nimport \"./App.css\";\n\nimport Menu from \"./components/Menu\";\n\nimport Users from \"./components/Users\";\nimport Posts from \"./components/Posts\";\n\nconst Container = styled.div`\n  @media ${theme.mediaQueries.mobileM(\"min\")} {\n    padding: 0rem 0rem;\n  }\n  @media ${theme.mediaQueries.tablet(\"min\")} {\n    padding: 1rem 10rem;\n  }\n  @media ${theme.mediaQueries.laptop(\"min\")} {\n    padding: 1rem 20rem;\n  }\n  @media ${theme.mediaQueries.laptopL(\"min\")} {\n    padding: 1rem 30rem;\n  }\n  @media ${theme.mediaQueries.desktopL(\"min\")} {\n    padding: 2rem 45rem;\n  }\n  border: 2px solid  #37C870 ;\n  height: 100vh;\n`;\n\nconst Content = styled.div`\n  padding-top: 2rem;\n  border: 3px solid blue;\n  height: auto;\n  background: ${\"lightgray\"};\n`;\n\nconst App = () => {\n  return (\n    <Container>\n      <Router>\n        <Menu />\n        <Content>\n          <Route path=\"/users\" component={Users} />\n          <Route path=\"/posts\" component={Posts} />\n        </Content>\n      </Router>\n    </Container>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { ApolloProvider as ApolloHooksProvider } from \"react-apollo-hooks\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nconst client = new ApolloClient({\n  uri: \"http://127.0.0.1:5000/graphql\"\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ApolloHooksProvider client={client}>\n      <App />\n    </ApolloHooksProvider>\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}